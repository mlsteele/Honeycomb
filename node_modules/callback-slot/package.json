{
  "name": "callback-slot",
  "version": "0.0.0",
  "description": "Callback conflict management using slots.",
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "~1.6.3",
    "jasmine-node": "~1.10.2"
  },
  "scripts": {
    "test": "jasmine-node --coffee spec/",
    "build": "coffee -cp src/slot.coffee > index.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mlsteele/slot.js.git"
  },
  "author": {
    "name": "Miles Steele",
    "email": "miles@milessteele.com"
  },
  "license": "Open",
  "readmeFilename": "README.md",
  "gitHead": "fe8fdd0677c9339cb7bc3ee121ebc895a2887706",
  "readme": "Slot.js\n=======\n`npm install callback-slot`\n\n## Description - What is a slot?\n\nSlot.js is an attempt to ease the pain of callback management.\n\nA slot is a callback 'channel'. It is a programmatic venue which is\nasychronous, but where the expected behavior becomes outdated quickly. A slot\nis responsible for firing only the latest registered callback in that slot. A\nslot will not fire any old callbacks other than the latest registered\ncallback. I wrote this thing and that still doesn't make any sense, so let's look\nat an example instead.\n\n## Usage\n\n    slot = make_slot()\n\n    # This is an example callback\n    callback = (data) -> console.log(data)\n    # Usually callbacks will involve rendering to a view\n    # and checking for errors.\n\n    # Slots return the original callback.\n    # So in the simplest case this\n    callback \"foobar\"\n    # is equivalent to this\n    (slot callback) \"foobar\"\n\n    # Let's register a callback for asynchronous data.\n    # Assume async_fetcher takes 2 arguments: `url` and `callback`.\n    async_fetcher 'http://data.please/foobar', slot (data) ->\n      render data\n\n    # After we register this next callback, we can rest assured that the\n    # callback for data from /foobar will NOT be called after the callback for\n    # data from /foobaz because they were registered to the same slot and\n    # /foobaz was registered latest.\n    async_fetcher 'http://data.please/foobaz', slot (data) ->\n      render data\n    # If /foobar were to return after /foobaz,\n    # the /foobar callback would be ignored.\n\n    # Slots are automatically cleared when they are called with a new callback.\n    # To explicitly clear a slot so that no old callbacks fire.\n    slot.clear()\n\n## Installation\n### Node.js\n\nInstall with node's npm package manager.\n\n    $ npm install callback-slot\n    $ node\n    > make_slot = require('callback-slot')\n    > some_slot = make_slot()\n\n### Browser\nSlots were originally intended for browser development. The `src/slot.coffee` file uses\n\n    module.exports = make_slot\n\nfor convenience during testing. To use slots in the browser, replace that line\nwith whatever import system you are using, or copy the function into your\nhelpers file.\n",
  "_id": "callback-slot@0.0.0",
  "dist": {
    "shasum": "3a7ad283305468e4d10b4e35bc8069904466dd78"
  },
  "_from": "git://github.com/mlsteele/slot.js.git"
}
